import {useState, useEffect} from 'react';

// publish가 끝나고 다른곳으로 이동하기
import {useRouter} from 'next/navigation';
import {pushLocalizedRoute} from '@/utils/UrlMove';

import styles from './CreateCharacterMain2.module.css';
import {BoldMixture, LineAIImage, LineEdit, LineUpload} from '@ui/Icons';

import CreateDrawerHeader from '@/components/create/CreateDrawerHeader';
import Splitters from '@/components/layout/shared/CustomSplitter';
import CustomButton from '@/components/layout/shared/CustomButton';

import CharacterCreateSequence from './../character/CreateCharacterSequence';
import CharacterImageSet from './CharacterImageSet';
import CharacterCreateBasic from './CharacterCreateBasic';
import CharacterCreateLLM from './CharacterCreateLLM';
import CharacterCreateMedia from './CharacterCreateMedia';
import CharacterCreateConversation from './CharacterCreateConversation';
import CharacterCreatePolicy from './CharacterCreatePolicy';

interface CreateCharacterProps {}

const CreateCharacterMain2: React.FC<CreateCharacterProps> = () => {
  const router = useRouter();

  //#region  Thumbnail
  const [imgUrl, setImgUrl] = useState(
    'https://avatar-play.s3.ap-northeast-2.amazonaws.com/image/e58b0be3-d640-431c-96be-bbeffcfa105f.jpg',
  );
  const [imgUploadOpen, setImgUploadOpen] = useState(false);
  //#endregion

  //#region Edit Thumbnail
  type UploadType = 'Mixture' | 'AIGenerate' | 'Upload';
  const [imgUploadType, setImgUploadType] = useState<UploadType | null>(null);
  //#endregion

  //#region  Basic
  const [characterName, setCharacterName] = useState<string>('');
  const [characterDesc, setCharacterDesc] = useState<string>('');

  //#endregion

  //#region Handler

  const handleOnClose = () => {
    router.back();
  };

  const handlerPublishFinish = () => {
    pushLocalizedRoute('/studio/character', router);
  };

  const handlerSetImage = (img: string) => {
    setImgUrl(img);
    setImgUploadOpen(false);
  };

  const handleOnClickThumbnail = () => {
    setImgUploadOpen(true);
  };

  //#endregion

  useEffect(() => {
    if (imgUploadOpen === true) {
      setImgUploadType(null);
    }
  }, [imgUploadOpen]);

  const splitterData = [
    {
      label: 'Basic',
      preContent: '',
      content: (
        <CharacterCreateBasic
          characterName={characterName}
          setCharacterName={setCharacterName}
          characterDesc={characterDesc}
          setCharacterDesc={setCharacterDesc}
        />
      ),
    },
    {
      label: 'LLM',
      preContent: '',
      content: <CharacterCreateLLM />,
    },
    {
      label: 'Media',
      preContent: '',
      content: <CharacterCreateMedia />,
    },
    {
      label: 'Conversation',
      preContent: '',
      content: <CharacterCreateConversation />,
    },
    {
      label: 'Policy',
      preContent: '',
      content: <CharacterCreatePolicy />,
    },
  ];

  const typeOption = [
    {
      label: 'Mixture',
      type: 'Mixture' as UploadType,
    },
    {
      label: 'Generated by AI',
      type: 'AIGenerate' as UploadType,
    },
    {
      label: 'Upload',
      type: 'Upload' as UploadType,
    },
  ];

  const renderSelectImageType = () => {
    return (
      <>
        <CreateDrawerHeader title="Create" onClose={() => setImgUploadOpen(false)} />
        <div className={styles.imageTypeArea}>
          {imgUploadType === null && (
            <div className={styles.verticalButtonGroup}>
              {typeOption.map((option, index) => (
                <button key={index} className={styles.uploadButton} onClick={() => setImgUploadType(option.type)}>
                  <div className={styles.buttonIconBack}>
                    <img
                      className={styles.buttonIcon}
                      src={index === 0 ? BoldMixture.src : index === 1 ? LineAIImage.src : LineUpload.src}
                      alt={option.label}
                    />
                  </div>
                  <div className={styles.buttonText}>{option.label}</div>
                </button>
              ))}
            </div>
          )}
          {imgUploadType === 'Mixture' && (
            <CharacterCreateSequence
              closeAction={() => {}}
              createType="create2"
              publishFinishAction={handlerPublishFinish}
              createFinishAction={handlerSetImage}
            />
          )}
          {imgUploadType === 'AIGenerate' && <CharacterImageSet createFinishAction={handlerSetImage} />}
          {imgUploadType === 'Upload' && <>Upload</>}
        </div>
      </>
    );
  };

  return (
    <div className={styles.characterContainer}>
      {!imgUploadOpen && (
        <div className={styles.characterMain}>
          <CreateDrawerHeader title="Create" onClose={handleOnClose} />

          <div className={styles.createCharacterArea}>
            <div className={styles.thumbnailArea}>
              <h2 className={styles.title2}>Thumbnail</h2>
              <div
                className={styles.thumbnailImage}
                style={{background: `url(${imgUrl}) lightgray 50% / cover no-repeat`}}
              >
                <button className={styles.editButton} onClick={handleOnClickThumbnail}>
                  <img className={styles.editIcon} src={LineEdit.src} />
                </button>
              </div>
            </div>
            <Splitters splitters={splitterData} headerStyle={{padding: '0'}} contentStyle={{padding: '0'}} />
          </div>
          <footer>
            <div className={styles.floatButtonArea}>
              <CustomButton
                size="Medium"
                type="Tertiary"
                state="Normal"
                customClassName={[styles.floatButton]}
                onClick={() => {}}
              >
                Import
              </CustomButton>
              <CustomButton
                size="Medium"
                type="Primary"
                state="Normal"
                customClassName={[styles.floatButton]}
                onClick={() => {}}
              >
                Submit
              </CustomButton>
            </div>
          </footer>
        </div>
      )}
      {imgUploadOpen && <>{renderSelectImageType()}</>}
    </div>
  );
};

export default CreateCharacterMain2;
